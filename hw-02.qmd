---
title: "HW 02"
author: "Amit Chawla"
format: 
  html:
    embed-resources: true
toc: true
---

### Packages & Setup

```{r}

if(!require(pacman))
  install.packages("pacman")

pacman::p_load(tidyverse,
               here,
               scales,
               ggthemes,
               ggridges,
               dsbox,
               glue,
               fs,
               dplyr,
               gt,
               ggrepel,
               patchwork,
               janitor,
               readr,
               stringr,
               lubridate,
               ggforce,
               tibble,
               palmerpenguins)

# set theme for ggplot2
ggplot2::theme_set(ggplot2::theme_minimal(base_size = 14))

# set width of code output
options(width = 65)

# set figure parameters for knitr
knitr::opts_chunk$set(
  fig.width = 7,        # 7" width
  fig.asp = 0.618,      # the golden ratio
  fig.retina = 3,       # dpi multiplier for displaying HTML output on retina
  fig.align = "center", # center align figures
  dpi = 300             # higher dpi, sharper image
)
```

## 1 - A new day, a new plot, a new geom

```{r}
#| label: Question-1 Solution

edibnb |>
  glimpse()

# Clean and prepare data
edibnb_clean <- edibnb |>
  filter(!is.na(neighbourhood), !is.na(review_scores_rating))

# Create ordered neighborhood levels by median review score
neighbourhood_order <- edibnb_clean |>
  group_by(neighbourhood) |>
  summarize(median_score = median(review_scores_rating, na.rm = TRUE), .groups = "drop") |>
  arrange(median_score) |>
  pull(neighbourhood)

# Apply ordering to factor
edibnb_clean <- edibnb_clean |>
  mutate(neighbourhood = factor(neighbourhood, levels = neighbourhood_order))

# Plot
ggplot(edibnb_clean, aes(x = review_scores_rating, y = neighbourhood)) +
  geom_density_ridges(scale = 1.2, rel_min_height = 0.01, fill = "#69b3a2", alpha = 0.7) +
  theme_minimal() +
  labs(
    title = "Distribution of Airbnb Review Scores by Edinburgh Neighborhood",
    x = "Review Score Rating",
    y = "Neighborhood"
  )
```

#### Interpretations

The ridgeline plot illustrates the distribution of Airbnb review scores across different neighborhoods in Edinburgh, sorted by their **median review scores**. Most neighborhoods have review scores concentrated in the high 80s to high 90s range, indicating generally **positive guest experiences** throughout the city.

However, neighborhoods like **Haymarket, Newington, and Old Town** show slightly more spread or lower peaks, suggesting **more variation or slightly lower average satisfaction** in those areas. In contrast, neighborhoods like **Morningside, Bruntsfield, and West End** have **high and narrow peaks** near the top end of the scale, pointing to **consistently high ratings** from guests.

Overall, while Airbnb guests tend to rate their stays positively across all neighborhoods, this visualization helps identify **subtle differences in guest satisfaction** and could be useful for property owners or city tourism planners aiming to improve experiences in specific areas.

## 2 - Foreign Connected PACs

```{r}
#| label: Question-2 part-1 solution

# Step 1: Get list of relevant files
list_of_files <- dir_ls(path = "data", regexp = "Foreign Connected PAC")

# Step 2: Read and combine files into one tibble, tracking filenames
pac_raw <- read_csv(list_of_files, id = "year")

# Step 3: Clean column names
pac_clean <- pac_raw |> 
  janitor::clean_names()

# Step 4: Extract year from file path string
pac_clean <- pac_clean |>
  mutate(year = str_extract(year, "-\\d{4}"), # Extracts "-2000"
         year = str_remove(year, "-"),       # Removes the hyphen to get "2000"
         year = as.integer(year))

# Step 5: Separate `country_of_origin_parent_company` into two columns
pac_clean <- pac_clean |> 
  separate(country_of_origin_parent_company, 
           into = c("country", "parent_company"), 
           sep = "/", 
           fill = "right",
           extra = "merge")

# Step 6: Remove `$` and commas, then convert numeric columns
pac_clean <- pac_clean |> 
  mutate(across(
    c(total, dems, repubs),
    ~ as.numeric(gsub("[$,]", "", .x))  # removes $ and , then converts
  ))

# Step 7: Select and rename final columns
pac_final <- pac_clean |> 
  select(year,
         pac_name_affiliate,
         country,
         parent_company,
         dems,
         repubs)

# View the cleaned tibble
pac_final

# Continue from the cleaned pac_final dataset
pac_long <- pac_final |> 
  pivot_longer(
    cols = c(dems, repubs),
    names_to = "party",
    values_to = "amount"
  ) |> 
  mutate(
    party = case_when(
      party == "dems" ~ "Democrat",
      party == "repubs" ~ "Republican"
    )
  )

# Summarize total contributions from UK PACs by year and party
uk_contributions <- pac_long |> 
  filter(country == "UK") |> 
  group_by(year, party) |> 
  summarise(total_contributions = sum(amount, na.rm = TRUE), .groups = "drop")

ggplot(uk_contributions, aes(x = year, y = total_contributions, color = party)) +
  geom_line(linewidth = 1.2) +
  scale_y_continuous(labels = dollar_format(scale = 1e-6, suffix = "M")) +
  scale_color_manual(values = c("Democrat" = "blue", "Republican" = "red")) +
  labs(
    title = "Contributions to US political parties from UK-connected PACs",
    x = "Year",
    y = "Total amount",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.caption = element_text(hjust = 1),
    legend.position = "right"
  )

```

```{r}
#| label: Question-2 part- Data prepration

# Get total contributions by country
country_contributions <- pac_long |>
  filter(!is.na(country)) |>  # remove missing countries
  group_by(country) |>
  summarise(total_amount = sum(amount, na.rm = TRUE), .groups = "drop") |>
  arrange(desc(total_amount))

# View the top 10 contributing countries
country_contributions |> head(10)
```

```{r}
#| label: Question-2 part-2 solution

# Summarize total contributions from Switzerland (ch) PACs by year and party
ch_contributions <- pac_long |> 
  filter(country == "Switzerland") |> 
  group_by(year, party) |> 
  summarise(total_contributions = sum(amount, na.rm = TRUE), .groups = "drop")

ggplot(ch_contributions, aes(x = year, y = total_contributions, color = party)) +
  geom_line(linewidth = 1.2) +
  scale_y_continuous(labels = dollar_format(scale = 1e-6, suffix = "M")) +
  scale_color_manual(values = c("Democrat" = "blue", "Republican" = "red")) +
  labs(
    title = "Contributions to US political parties from CH-connected PACs",
    x = "Year",
    y = "Total amount",
    color = "Party",
    caption = "Source: OpenSecrets.org"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.caption = element_text(hjust = 1),
    legend.position = "right"
  )
```

#### Remarks:

Seems, like in the early 2000s most of the contributions were made to the Republican party compared to Democrat by Switzerland. Later on from the year 2007-2010 both parties got similar amount of investments. Furthermore, in the following years Republican party seems to be gaining a lot more contribution during the years from 2010-2021. And eventually in the end, after 2021 the Democrat started to catch-up and Republican observed a fall.

## 3 - Median housing prices in the US

```{r}
#| label: Question-3 part-1 solution
# Load and clean median housing data
housing <- read_csv("data/median-housing.csv") |>
  rename(date = DATE, price = MSPUS)

# Load and clean recessions data
recessions <- read_csv("data/recessions.csv") |>
  rename(start = Peak, end = Trough)

# Create the plot
ggplot(housing, aes(x = date, y = price)) +
  geom_line(color = "royalblue", linewidth = 1.2) +
    scale_y_continuous(
    labels = scales::comma,
    breaks = seq(0, 400000, by = 40000)
  ) +
  scale_x_date(
  breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 years"),
  date_labels = "%Y"
  ) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = NULL,
    y = "Dollars",
    caption = "Sources: Census; HUD"
  ) +
    theme_minimal(base_size = 14) +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank()
    )
```

```{r}
#| label: Question-3 part-2 solution
# Filter only relevant recessions
recessions_filtered <- recessions |>
  filter(end >= min(housing$date) & start <= max(housing$date))

# Create the plot
ggplot(housing, aes(x = date, y = price)) +
  geom_line(color = "royalblue", linewidth = 1.2) +
  geom_rect(data = recessions_filtered,
          aes(xmin = start, xmax = end, ymin = -Inf, ymax = Inf),
          fill = "gray", alpha = 0.3, inherit.aes = FALSE) +
    scale_y_continuous(
    labels = scales::comma,
    breaks = seq(0, 400000, by = 40000)
  ) +
scale_x_date(
  breaks = seq(as.Date("1965-01-01"), as.Date("2020-01-01"), by = "5 years"),
  date_labels = "%Y"
  ) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = NULL,
    y = "Dollars",
    caption = "Sources: Census; HUD"
  ) +
    theme_minimal(base_size = 14) +
    theme(
      panel.grid.major.x = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.minor.y = element_blank()
    )
```

```{r}
#| label: Question-3 part-3 solution

# Filter for 2019 and 2020 only and add year and quarter columns
housing_q <- housing |>
  filter(year(date) %in% c(2019, 2020)) |>
  mutate(
    year = year(date),
    quarter = paste0("Q", quarter(date)),
    year_quarter = paste(year, quarter, sep = "-")
  )

# Order year_quarter
housing_q <- housing_q |>
  mutate(year_quarter = factor(year_quarter, levels = unique(year_quarter)))

# Create quarter labels
quarter_labels <- rep(c("Q1", "Q2", "Q3", "Q4"), times = 2)

# Plot
ggplot(housing_q, aes(x = year_quarter, y = price, group = 1)) +
  geom_line(color = "royalblue", linewidth = 1.2) +
  geom_point(color = "white", fill = "royalblue", size = 3, shape = 21, stroke = 1.5) +
  scale_y_continuous(labels = scales::comma) +
  scale_x_discrete(labels = quarter_labels) +
  labs(
    title = "Median sales price of houses sold in the United States",
    subtitle = "Not seasonally adjusted",
    x = "\n 2019                                    2020",
    y = "Dollars"
  ) +
  coord_cartesian(clip = "off") +  # allow annotation outside plot area
  theme_minimal(base_size = 14) +
  theme(
    axis.text.x = element_text(margin = margin(t = 10)),
    plot.margin = margin(b = 40),  # extra space at bottom
    axis.ticks.length.x = unit(0, "pt")
  )
```

## 4 - Expect More. Plot More.

```{r}
#| label: Question-4 solution

# Define radii
R_outer <- 1
R_inner <- 0.6
R_dot   <- 0.333

# Define circles using tribble
circles <- tribble(
  ~x0, ~y0, ~r,     ~fill,
  0,   0,   R_outer, "#CC0000",
  0,   0,   R_inner, "white",
  0,   0,   R_dot,   "#CC0000"
)

# Create the plot using |> and better aes mapping
circles |>
  ggplot() +
  geom_circle(
    aes(x0 = x0, y0 = y0, r = r, fill = fill),
    color = NA
  ) +
  scale_fill_identity() +
  annotate(
    "text",
    x = 0,
    y = -1.2,
    label = "TARGET",
    family = "sans",
    fontface = "bold",
    size = 10,
    color = "#CC0000"
  ) +
  annotate(
    "text",
    x = 0.5,
    y = -1.3,
    label = "\u00AE",
    family = "sans",
    size = 5,
    color = "#CC0000"
  ) +
  coord_fixed(ratio = 1) +
  theme_void() +
  theme(
    plot.background = element_rect(fill = "white", color = NA)
  )

```

#### References

-   <https://ggforce.data-imaginist.com/reference/geom_circle.html>

-   <https://rdrr.io/cran/geomnet/man/geom_circle.html>

## 5 - Mirror, mirror on the wall, who’s the ugliest of them all?

```{r}
#| label: Question-5 solution

penguins_clean <- penguins |>
  filter(
    !is.na(flipper_length_mm),
    !is.na(body_mass_g),
    !is.na(bill_depth_mm)
  )

ggplot(data = penguins_clean, aes(
  x = flipper_length_mm,
  y = body_mass_g,
  shape = island,
  size = bill_depth_mm,
  color = species
)) +
  geom_point(alpha = 0.9) +
  labs(
    title = "🌈UgLy PeNgUiN pLoT!!!🌪️",
    subtitle = "Visual Offense to the Senses",
    x = "👉FlIpPeR LeNgTh?!",
    y = "BoDy MaSs?!😱",
    caption = "Made with ❤️ and zero taste"
  ) +
  scale_color_manual(values = c(
    "Adelie" = "#00FF00",     # Lime
    "Chinstrap" = "#FF00FF",  # Magenta
    "Gentoo" = "#00FFFF"      # Cyan
  )) +
  theme(
    plot.background = element_rect(fill = "hotpink", color = "darkgreen", linewidth = 3),
    panel.background = element_rect(fill = "yellow"),
    panel.grid.major = element_line(color = "red", linetype = "dashed"),
    panel.grid.minor = element_line(color = "blue", linetype = "dotted"),
    
    plot.title = element_text(face = "bold.italic", size = 24, color = "orangered"),
    plot.subtitle = element_text(face = "italic", size = 14, color = "darkblue"),
    axis.text = element_text(size = 14, color = "purple", angle = 45),
    axis.title = element_text(size = 16, color = "brown"),
    
    legend.position = "bottom",
    legend.background = element_rect(fill = "green"),
    legend.text = element_text(size = 12, color = "black")
  )
```
